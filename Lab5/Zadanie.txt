Laboratorium PK3 (zadanie 3 -wymiana komunikatów miêdzy obiektami)


Dana jest klasa:

const int N=10;

class *User; // UWAGA zale¿noœæ miêdzy obiektami

class  MailBox
  {
    // friend class User; ewntualne uzycie seterów i geterów
    string *mbox[N]; //tablica wiadomoœci od  uzytkownikow skrzynki
                    // indeksem tablicy jest id uzytkownika
    ofstream log; //plik z raportem
    ofstream backup; // zawartoœæ mbox do pliku backup gdy usuwamy obiekt

   public:
      Mailbox(string& name_of_logfile, string& name_of_backupfile); // je¿eli plik backup  ju¿ istnieje wczytuje go do mbox
      ~Mailbox(); // zapisuje wszystkie wiadomoœci do backup i usuwa z pamiêci
      // Uwaga poni¿sze metody musz¹ byæ w osobnym pliku:

      bool send(string &msg,User *sender, User * reciever) // uzytkownik sender wysyla wiadomosc msg do uzytkownika reciever
      {
        // do pliku log zapisujemy date i czas nadania wiadomosci, id oraz nazwê  nadawcy oraz odbiorcy
        // w przypadku przekroczenia skrzynki mbox zwracamy false  i zapisujemy w pliku log to zdarzenie  jako error
        // jezeli id odbiorcy jest równa id nadawcy wiadomoœæ odrzucamy i zwracamy false
        // umieszczamy tresc wiadomoœci  czas nadania i adres nadawcy   w tablicy pod indeksem bêd¹cym id odbiorcy
        // je¿eli by³a wiadomoœæ nie odebrana doklejamy j¹ (operator + na klasie string) wiadomoœci odzielone s¹
        // ³añcuchem "\n***********\n"
      }
      string * receive(User *user ) // zwraca NULL w przypadku b³êdu - indeks poza zakresem, 
									 //lub gdy niema wiadomoœæ dla tego u¿ytkownika
      void print(); // wyœietla wszystkie wiadomoœci w skrynce
  }

static int User::id=0

class  User
  {  
    static int id; // zmienna statyczna inkrementowana w konstruktorze bêd¹ca id nastêpnego  u¿ytkownika
    int myid; // id u¿ytkownika
    string nickname // nazwa u¿ytkownika
    MailBox *mb;// adres skrzynki z któr¹ jest zwiazany u¿ytkownik

   public:

    User( MailBox *mb_, string & nickname_)//
      {
        myid=id++; //przypisanie unikalnego id
        // nadanie nazwy u¿ytkownikowi
        // przypisanie skrzynki zdefiniowanej wczeœniej
      }

     bool send(string &msg, User & reciever)//
      {
         mb->send(msg,this, &reciever); // wywo³ujemy send w klasie Mbox
      };

     bool receive()// pobieram wiadomoœæ ze skrzynki
      {
         mb->send(this); // wywo³ujemy send w klasie Mbox
         // wyœwietla wiadomoœæ na ekranie
         // nastêpnie usuwa
      }
}
      

  W funkcji main() utworzyæ  skrzynke: mbox  oraz 4 u¿ytkowników A, B ,C i D.

  Utworzyæ rózne scenariusze wysy³ania wiadomoœci np:

  A wysyla wiadomoœæ do B, C i D;

  B wysyla wiadomoœæ do A,  C i D;

  C odczytuje wiadomoœæ itd.